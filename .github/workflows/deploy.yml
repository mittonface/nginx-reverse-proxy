name: Deploy Nginx Reverse Proxy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate nginx configuration
        run: |
          # Test nginx-initial.conf (HTTP only - no SSL dependencies)
          docker run --rm -v $PWD/nginx-initial.conf:/etc/nginx/nginx.conf:ro nginx:alpine nginx -t
          echo "✅ HTTP configuration is valid"
          
          # Skip SSL configuration validation in CI - will be validated on deployment with real certificates
          echo "ℹ️  SSL configuration will be validated on server with real certificates"

      - name: Validate docker-compose
        run: |
          # Check docker-compose syntax (try new plugin first, fallback to legacy)
          if docker compose version >/dev/null 2>&1; then
            docker compose config -q
          else
            # Install docker-compose if not available
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose config -q
          fi
          echo "✅ Docker Compose configuration is valid"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "nginx.conf,nginx-initial.conf,docker-compose.yml,deploy.sh,init-letsencrypt.sh,README.md,Makefile"
          target: "/root/nginx-reverse-proxy"
          strip_components: 0

      - name: Deploy reverse proxy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /root/nginx-reverse-proxy
            
            # Create shared network if it doesn't exist
            docker network create proxy-network 2>/dev/null || true
            
            # Stop existing containers gracefully
            docker-compose down --timeout 30 || true
            
            # Pull external images
            docker pull nginx:alpine || true
            docker pull certbot/certbot || true
            
            # Configure SSL based on certificate availability
            if [ -f "certbot/conf/live/temps.mittn.ca/fullchain.pem" ] && \
               [ -f "certbot/conf/live/camera.mittn.ca/fullchain.pem" ]; then
              echo "✅ SSL certificates found for both domains, using HTTPS configuration"
              cp nginx.conf nginx.conf.active
            else
              echo "ℹ️  SSL certificates not found for all domains, using HTTP configuration"
              cp nginx-initial.conf nginx.conf.active
            fi
            
            # Update docker-compose to use active config
            sed -i 's|nginx.conf:/etc/nginx/nginx.conf|nginx.conf.active:/etc/nginx/nginx.conf|g' docker-compose.yml
            
            # Start services
            docker-compose up -d
            
            # Clean up old images
            docker image prune -f --filter "until=24h"

      - name: Health check
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "🔄 Performing health check..."
            
            # Wait for services to initialize
            sleep 15
            
            # Health check with retries
            for i in {1..6}; do
              echo "Health check attempt $i/6..."
              
              # Test both domains
              house_temp_ok=false
              camera_ok=false
              
              if curl -f -s --max-time 10 -H "Host: temps.mittn.ca" http://localhost/health >/dev/null 2>&1; then
                house_temp_ok=true
              fi
              
              if curl -f -s --max-time 10 -H "Host: camera.mittn.ca" http://localhost/health >/dev/null 2>&1; then
                camera_ok=true
              fi
              
              if [ "$house_temp_ok" = true ] && [ "$camera_ok" = true ]; then
                echo "✅ Both services are healthy and responding!"
                echo "🏠 House Temp Tracker: http://temps.mittn.ca"
                echo "📷 Camera Viewer: http://camera.mittn.ca"
                echo "🚀 Deployment completed successfully!"
                exit 0
              elif [ $i -eq 6 ]; then
                echo "❌ Health check failed after $i attempts"
                echo "House Temp Tracker: $($house_temp_ok && echo '✅' || echo '❌')"
                echo "Camera Viewer: $($camera_ok && echo '✅' || echo '❌')"
                echo "📋 Container logs:"
                docker-compose logs --tail=30
                echo "📊 Container status:"
                docker-compose ps
                exit 1
              else
                echo "⏳ Services not ready, waiting 15 seconds..."
                echo "House Temp Tracker: $($house_temp_ok && echo '✅' || echo '❌')"
                echo "Camera Viewer: $($camera_ok && echo '✅' || echo '❌')"
                sleep 15
              fi
            done

      - name: SSL Certificate Status
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /root/nginx-reverse-proxy
            
            echo "🔒 SSL Certificate Status:"
            
            for domain in "temps.mittn.ca" "camera.mittn.ca"; do
              if [ -f "certbot/conf/live/${domain}/fullchain.pem" ]; then
                echo "✅ ${domain}: SSL certificate exists"
                # Check expiration
                docker run --rm -v $PWD/certbot/conf:/etc/letsencrypt certbot/certbot certificates | grep -A 5 "$domain" || true
              else
                echo "❌ ${domain}: No SSL certificate found"
              fi
            done
            
            if [ ! -f "certbot/conf/live/temps.mittn.ca/fullchain.pem" ] || \
               [ ! -f "certbot/conf/live/camera.mittn.ca/fullchain.pem" ]; then
              echo ""
              echo "📝 To set up SSL certificates, run: ./init-letsencrypt.sh"
              echo "   Make sure DNS records point to this server first!"
            fi